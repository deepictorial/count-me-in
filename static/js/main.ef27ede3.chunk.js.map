{"version":3,"sources":["Clock.js","Countdown.js","Navigation.js","App.js","serviceWorker.js","index.js"],"names":["Clock","props","state","date","Date","days","hours","min","sec","this","setState","interval","setInterval","calculateCountdown","stop","prevProps","clearInterval","endDate","diff","parse","timeLeft","years","millisec","Math","floor","className","React","Component","Countdown","eventname","handleChange","bind","onFormSubmit","handleTextChange","startDate","event","target","value","e","preventDefault","document","getElementById","classList","add","sendEvent","username","eventdate","countdownitem","user","time","getTime","fetch","method","headers","body","JSON","stringify","then","response","status","console","log","catch","err","warn","onSubmit","id","placeholder","onChange","selected","showTimeSelect","dateFormat","Navigation","handleClick","innerHTML","passUserName","Navbar","bg","expand","Brand","Form","inline","FormControl","type","Button","variant","onClick","App","getUsername","navUsername","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.ef27ede3.chunk.js","sourcesContent":["import React from 'react';\n\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      date: new Date(),\n      days: 0,\n      hours: 0,\n      min: 0,\n      sec: 0,\n    };\n  }\n\n  componentDidMount() {\n    this.setState((state,props) => ({date: props.date}));\n    this.interval = setInterval(() => {\n      const date = this.calculateCountdown(this.props.date);\n      date ? this.setState(date) : this.stop();\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    this.stop();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.date !== prevProps.date) {\n      this.setState((state,props) => ({date: props.date}));\n    }\n    this.interval = setInterval(() => {\n      const date = this.calculateCountdown(this.props.date);\n      date ? this.setState(date) : this.stop();\n    }, 1000);\n  }\n\n  stop() {\n     clearInterval(this.interval);\n   }\n\n  calculateCountdown(endDate) {\n    let diff = (Date.parse(new Date(endDate)) - Date.parse(new Date())) / 1000;\n\n    // clear countdown when date is reached\n    if (diff <= 0) return false;\n\n    const timeLeft = {\n      years: 0,\n      days: 0,\n      hours: 0,\n      min: 0,\n      sec: 0,\n      millisec: 0,\n    };\n\n    if (diff >= (365.25 * 86400)) { // 365.25 * 24 * 60 * 60\n       timeLeft.years = Math.floor(diff / (365.25 * 86400));\n       diff -= timeLeft.years * 365.25 * 86400;\n     }\n    if (diff >= 86400) { // 24 * 60 * 60\n       timeLeft.days = Math.floor(diff / 86400);\n       diff -= timeLeft.days * 86400;\n     }\n    if (diff >= 3600) { // 60 * 60\n       timeLeft.hours = Math.floor(diff / 3600);\n       diff -= timeLeft.hours * 3600;\n    }\n    if (diff >= 60) {\n       timeLeft.min = Math.floor(diff / 60);\n       diff -= timeLeft.min * 60;\n    }\n    timeLeft.sec = diff;\n\n    return timeLeft;\n\n  }\n\n  render() {\n    const { days, hours, min, sec } = this.state\n\n    return (\n      <div>\n        <h3 className=\"countdown-text\">{ days } days, { hours } hrs, { min } min, { sec } s remaining</h3>\n      </div>\n    );\n  }\n}\n\nexport default Clock;\n","import React from 'react';\nimport './App.css';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Clock from './Clock.js';\n\nclass Countdown extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {date: new Date(), eventname: 'Enter event name'};\n    this.handleChange = this.handleChange.bind(this);\n    this.onFormSubmit = this.onFormSubmit.bind(this);\n    this.handleTextChange = this.handleTextChange.bind(this);\n  }\n\n  handleChange(date) {\n    this.setState({\n      startDate: date\n    })\n  }\n\n  handleTextChange(event) {\n    this.setState({\n      eventname: event.target.value\n    })\n  }\n\n  componentDidMount() {\n  }\n\n  onFormSubmit(e) {\n    e.preventDefault();\n    this.setState((state,props) => (\n      {date: state.startDate, eventname: state.eventname}));\n    document.getElementById('event-text').classList.add('saved-text');\n    this.sendEvent();\n  }\n\n  async sendEvent() {\n    //{\"user\":\"user1\",\"event\":\"its a random tuesday\", \"time\":1590125266}\n    let username = this.props.username;\n    let eventname = this.state.eventname;\n    let eventdate = this.state.date;\n    let countdownitem = {user: username, event: eventname, time: eventdate.getTime()};\n\n    let response = await fetch('https://law20kowah.execute-api.us-west-2.amazonaws.com/prod/setnewcountdown', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json;charset=utf-8'\n    },\n      body: JSON.stringify(countdownitem)\n    }).then(function (response) {\n      if(response.status === 200) {\n        console.log(\"countdown date has been sent\",countdownitem);\n      } else if(response.status > 399){\n        console.log(\"countdown date has wasnt sent, check errors\");\n      }\n    }).catch(function (err) {\n  \t  console.warn('Something went wrong.', err);\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"countdown-new\">\n        <form onSubmit={ this.onFormSubmit }>\n        <div className=\"form-group\">\n          <div className=\"event-group\">\n            <textarea\n              id=\"event-text\"\n              placeholder=\"Your event name..\"\n              onChange={this.handleTextChange}>\n            </textarea>\n          </div>\n          <DatePicker\n            className=\"date-picker\"\n            selected={this.state.startDate}\n            onChange={this.handleChange}\n            showTimeSelect\n            dateFormat=\"MMMM d, yyyy h:mm aa\"/>\n          <button\n            className=\"btn btn-primary\">Start Countdown</button>\n        </div>\n        </form>\n        <Clock date={this.state.date}/>\n      </div>\n    );\n  }\n}\n\nexport default Countdown;\n","import React from 'react';\nimport './App.css';\nimport Navbar from 'react-bootstrap/navbar';\nimport Form from 'react-bootstrap/form';\nimport FormControl from 'react-bootstrap/formcontrol';\nimport Button from 'react-bootstrap/button';\n\nclass Navigation extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {username: \"user1\"};\n    this.handleClick = this.handleClick.bind(this);\n    this.handleTextChange = this.handleTextChange.bind(this);\n  }\n\n  handleClick(event) {\n    document.getElementById('user-display').innerHTML = \"Welcome \" + this.state.username;\n    document.getElementById('user-name').value = '';\n    this.props.passUserName(this.state.username);\n  }\n\n  handleTextChange(event) {\n    this.setState({\n      username: event.target.value\n    })\n  }\n\n  render() {\n    return (\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand\n          id=\"user-display\">Hello</Navbar.Brand>\n          <Form inline>\n            <FormControl\n              type=\"text\"\n              placeholder=\"enter username..\"\n              className=\"mr-sm-2\"\n              id=\"user-name\"\n              onChange={this.handleTextChange} />\n            <Button\n              variant=\"success\"\n              onClick={this.handleClick}>Login</Button>\n          </Form>\n      </Navbar>\n    );\n  }\n}\n\nexport default Navigation;\n","import React from 'react';\nimport './App.css';\nimport Countdown from './Countdown.js';\nimport Navigation from './Navigation.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { username: null };\n  }\n\n  getUsername = (navUsername) => {\n    this.setState({ username: navUsername })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navigation passUserName={this.getUsername}/>\n        <Countdown username={this.state.username}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}